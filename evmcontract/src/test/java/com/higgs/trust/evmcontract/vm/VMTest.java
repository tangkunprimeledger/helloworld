package com.higgs.trust.evmcontract.vm;

import com.higgs.trust.evmcontract.config.SystemProperties;
import com.higgs.trust.evmcontract.core.Block;
import com.higgs.trust.evmcontract.core.Repository;
import com.higgs.trust.evmcontract.core.Transaction;
import com.higgs.trust.evmcontract.datasource.inmem.HashMapDB;
import com.higgs.trust.evmcontract.db.BlockStore;
import com.higgs.trust.evmcontract.db.RepositoryRoot;
import com.higgs.trust.evmcontract.solidity.Abi;
import com.higgs.trust.evmcontract.solidity.SolidityType;
import com.higgs.trust.evmcontract.util.ByteUtil;
import com.higgs.trust.evmcontract.vm.program.Program;
import com.higgs.trust.evmcontract.vm.program.ProgramResult;
import com.higgs.trust.evmcontract.vm.program.invoke.ProgramInvoke;
import com.higgs.trust.evmcontract.vm.program.invoke.ProgramInvokeImpl;
import org.junit.Test;
import org.spongycastle.util.BigIntegers;
import org.spongycastle.util.encoders.Hex;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import static org.apache.commons.lang3.ArrayUtils.nullToEmpty;

/**
 * @author tangkun
 * @date 2018-11-15
 */
public class VMTest {

    byte[] root = null;
    byte[] resultBytes = null;

    /**
     * @return - generate random 32 byte hash
     */
    public static byte[] randomHash() {

        byte[] randomHash = new byte[32];
        Random random = new Random();
        random.nextBytes(randomHash);
        return randomHash;
    }

    /**
     * @param data = not null
     * @return new positive BigInteger
     */
    public static BigInteger toBI(byte[] data) {
        return new BigInteger(1, data);
    }

    /**
     * @param data = not null
     * @return new positive BigInteger
     */
    public static BigInteger toBI(long data) {
        return BigInteger.valueOf(data);
    }

    @Test
    public void testPlay() throws Exception {

        byte[] nonce = BigIntegers.asUnsignedByteArray(BigInteger.ZERO);
        byte[] gasPrice = Hex.decode("e8d4a51000");     // 1000000000000
        byte[] gas = Hex.decode("27100000");           // 10000
        byte[] recieveAddress = Hex.decode("");//13978aee95f38490e9769c39b2773ed763d9cd5f
        byte[] value = Hex.decode(""); //10000000000000000 2386f26fc10000"
        byte[] data = Hex.decode("60a0604052600960608190527fe4bda0e5a6b9e591800000000000000000000000000000000000000000000000608090815261003e916001919061004c565b50341561004757fe5b6100ec565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061008d57805160ff19168380011785556100ba565b828001600101855582156100ba579182015b828111156100ba57825182559160200191906001019061009f565b5b506100c79291506100cb565b5090565b6100e991905b808211156100c757600081556001016100d1565b5090565b90565b6102da806100fb6000396000f300606060405236156100755763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166317d7de7c8114610077578063b21e51f114610107578063b2ab51541461011f578063c226d9ee14610131578063e1cb0e5214610143578063f0ba844014610165575bfe5b341561007f57fe5b61008761018a565b6040805160208082528351818301528351919283929083019185019080838382156100cd575b8051825260208311156100cd57601f1990920191602091820191016100ad565b505050905090810190601f1680156100f95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561010f57fe5b61011d600435602435610222565b005b341561012757fe5b61011d610238565b005b341561013957fe5b61011d610262565b005b341561014b57fe5b610153610283565b60408051918252519081900360200190f35b341561016d57fe5b61015360043561028a565b60408051918252519081900360200190f35b61019261029c565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102175780601f106101ec57610100808354040283529160200191610217565b820191906000526020600020905b8154815290600101906020018083116101fa57829003601f168201915b505050505090505b90565b60008281526002602052604090208190555b5050565b60015b600a81101561025e5760008181526002602052604090208190555b60010161023b565b5b50565b60005b600a81101561025e5760008054820190555b600101610265565b5b50565b6000545b90565b60026020526000908152604090205481565b604080516020810190915260008152905600a165627a7a723058209c5aaec907c4976049ebb408c3d47496d780f97fb62be19678fbc28ebbf1a6000029");
        HashMapDB db = new HashMapDB();
        //create contract
        byte[] contractAddress = invokedContract(nonce, gasPrice, gas, recieveAddress, value, data, db);

        //call contract
        // data = Hex.decode("191347df000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000033233340000000000000000000000000000000000000000000000000000000000");
        data = Hex.decode("b2ab5154");
        recieveAddress = contractAddress;
        // root = "ee230b9f9ce8330aee2a1d0e7b3328d5caf1fe4314c82b07a6d8442c44f40151".getBytes();
        System.out.println("-------------------执行合约------------------");
        invokedContract(nonce, gasPrice, gas, recieveAddress, value, data, db);

    }

    public byte[] invokedContract(byte[] nonce, byte[] gasPrice, byte[] gas, byte[] recieveAddress, byte[] value, byte[] data,
                                  HashMapDB db) {
        Transaction tx = new Transaction(nonce, gasPrice, gas, recieveAddress, value, data);

        Block block = new Block();

        RepositoryRoot repository = new RepositoryRoot(db, root);
        Repository txTrack = repository.startTracking();
        Repository contractTrack = txTrack.startTracking();

        ProgramInvoke programInvoke = createProgramInvoke(tx, block, contractTrack, null);
        Program program;
        if (!tx.isContractCreation()) {
            program = new Program(contractTrack.getCode(recieveAddress), programInvoke, tx, SystemProperties.getDefault());
        } else {
            program = new Program(tx.getData(), programInvoke, tx, SystemProperties.getDefault());
        }

        VM vm = new VM(SystemProperties.getDefault());
        vm.play(program);

        ProgramResult result = program.getResult();
        if (tx.isContractCreation() && !result.isRevert()) {
            contractTrack.saveCode(tx.getContractAddress(), result.getHReturn());
        }
        contractTrack.commit();
        txTrack.commit();
        repository.commit();
        if (program.getResult().getException() != null || program.getResult().isRevert()) {
            System.out.println("合約异常:" + program.getResult().getException());
        } else {
            System.out.println("合約result:" + Hex.toHexString(program.getResult().getHReturn()));
            resultBytes = program.getResult().getHReturn();
        }
        root = repository.getRoot();
        System.out.println("root hash:{}" + Hex.toHexString(root));
        return tx.getContractAddress();
    }


    public ProgramInvoke createProgramInvoke(Transaction tx, Block block, Repository repository,
                                             BlockStore blockStore) {
        /***         ADDRESS op       ***/
        // YP: Get address of currently executing account.
        byte[] address = tx.isContractCreation() ? tx.getContractAddress() : tx.getReceiveAddress();

        /***         ORIGIN op       ***/
        // YP: This is the sender of original transaction; it is never a contract.
        byte[] origin = tx.getSender();

        /***         CALLER op       ***/
        // YP: This is the address of the account that is directly responsible for this execution.
        byte[] caller = tx.getSender();

        /***         BALANCE op       ***/
        byte[] balance = repository.getBalance(address).toByteArray();

        /***         GASPRICE op       ***/
        byte[] gasPrice = tx.getGasPrice();

        /*** GAS op ***/
        byte[] gas = tx.getGasLimit();

        /***        CALLVALUE op      ***/
        byte[] callValue = nullToEmpty(tx.getValue());

        /***     CALLDATALOAD  op   ***/
        /***     CALLDATACOPY  op   ***/
        /***     CALLDATASIZE  op   ***/
        byte[] data = tx.isContractCreation() ? ByteUtil.EMPTY_BYTE_ARRAY : nullToEmpty(tx.getData());

        /***    PREVHASH  op  ***/
        byte[] lastHash = block.getParentHash();

        /***   COINBASE  op ***/
        byte[] coinbase = block.getCoinbase();

        /*** TIMESTAMP  op  ***/
        long timestamp = block.getTimestamp();

        /*** NUMBER  op  ***/
        long number = block.getNumber();

        /*** DIFFICULTY  op  ***/
        byte[] difficulty = block.getDifficulty();

        /*** GASLIMIT op ***/
        byte[] gaslimit = block.getGasLimit();


        return new ProgramInvokeImpl(address, origin, caller, balance, gasPrice, gas, callValue, data,
                lastHash, coinbase, timestamp, number, difficulty, gaslimit,
                repository, blockStore);
    }

    @Test
    public void testSTO() {

        byte[] nonce = BigIntegers.asUnsignedByteArray(BigInteger.ZERO);
        byte[] gasPrice = Hex.decode("e8d4a51000");     // 1000000000000
        byte[] gas = Hex.decode("27100000");           // 10000
        byte[] recieveAddress = Hex.decode("");//13978aee95f38490e9769c39b2773ed763d9cd5f
        byte[] value = Hex.decode(""); //10000000000000000 2386f26fc10000"
        //部署token合约
        byte[] data = Hex.decode("6060604052341561000f57600080fd5b5b6104168061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663136d6a3981146100485780637adc40dd14610086575b600080fd5b341561005357600080fd5b61007473ffffffffffffffffffffffffffffffffffffffff60043516610145565b60405190815260200160405180910390f35b341561009157600080fd5b6100a360043561ffff60243516610171565b604051808060200180602001848152602001838103835286818151815260200191508051906020019060200280838360005b838110156100ee5780820151818401525b6020016100d5565b50505050905001838103825285818151815260200191508051906020019060200280838360005b8381101561012e5780820151818401525b602001610115565b505050509050019550505050505060405180910390f35b73ffffffffffffffffffffffffffffffffffffffff81166000908152600460205260409020545b919050565b6101796103c6565b6101816103c6565b60008061018c6103c6565b6101946103c6565b60008060008060008060018e101580156101b3575060018d61ffff1610155b15156101be57600080fd5b6103e861ffff8e1611156101d2576103e89c505b600554985061ffff8d16899011156101e857889c505b6000198e0161ffff8e1602955088861061020a5787878a9b509b509b50610354565b6102158e8e8b610364565b94506000935060009150600090505b8461ffff168161ffff16101561034a57600580548790811061024257fe5b906000526020600020900160005b905473ffffffffffffffffffffffffffffffffffffffff6101009290920a900416600081815260046020526040812054955090935084111561033b5761ffff821615156102e4578461ffff166040518059106102a95750595b908082528060200260200182016040525b5097508461ffff166040518059106102cf5750595b908082528060200260200182016040525b5096505b82888361ffff16815181106102f557fe5b73ffffffffffffffffffffffffffffffffffffffff909216602092830290910190910152838761ffff84168151811061032a57fe5b602090810290910101526001909101905b6001909501945b600101610224565b87878a9b509b509b505b5050505050505050509250925092565b60008060008461ffff168481151561037857fe5b061515610387578492506103bd565b8461ffff168481151561039657fe5b0460018101925086116103ab578492506103bd565b50600019850161ffff85160283039150815b50509392505050565b60206040519081016040526000815290565b602060405190810160405260008152905600a165627a7a72305820213776ab5d1dcfeb5d320cf59e1ea2f2bdcc7d1a7d0d37b934dab3bc2fff3edf0029");
        HashMapDB db = new HashMapDB();

        //create contract
        //  byte[] tokenContractAdd = invokedContract(nonce, gasPrice, gas, recieveAddress, value, data, db);

        //部署STO合约
        data = Hex.decode("6060604052341561000f57600080fd5b604051610c17380380610c17833981016040528080519190602001805182019190602001805182019190602001805191906020018051820191906020018051919060200180519190602001805191906020018051919060200180519150505b60098054604060020a60e060020a03191668010000000000000000600160a060020a038d160217905560018980516100aa929160200190610221565b5060028880516100be929160200190610221565b50600387905560068680516100d7929160200190610221565b506007805460a060020a63ffffffff0219167401000000000000000000000000000000000000000063ffffffff888116919091029190911760c060020a63ffffffff0219167801000000000000000000000000000000000000000000000000878316021790915560088490556009805463ffffffff19168483161767ffffffff00000000191664010000000092841692909202919091179081905560035468010000000000000000909104600160a060020a031660009081526004602052604090205560058054600181016101ac83826102a0565b916000526020600020900160005b6009805483546101009390930a600160a060020a03680100000000000000009283900481168202918102199094161790935554919091041660009081526004602052604090206001908101805460ff19169091179055505b505050505050505050506102eb565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061026257805160ff191683800117855561028f565b8280016001018555821561028f579182015b8281111561028f578251825591602001919060010190610274565b5b5061029c9291506102ca565b5090565b8154818355818115116102c4576000838152602090206102c49181019083016102ca565b5b505050565b6102e891905b8082111561029c57600081556001016102d0565b5090565b90565b61091d806102fa6000396000f300606060405236156100755763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663136d6a39811461007a5780633d273987146100ab57806367b8dc0a146100d55780637adc40dd14610117578063a581e8ea146101d6578063e1f156a31461021e575b600080fd5b341561008557600080fd5b610099600160a060020a036004351661024a565b60405190815260200160405180910390f35b34156100b657600080fd5b6100c1600435610269565b604051901515815260200160405180910390f35b34156100e057600080fd5b6100c1600160a060020a036004358116906024358116906044351660643561027c565b604051901515815260200160405180910390f35b341561012257600080fd5b61013460043561ffff60243516610294565b604051808060200180602001848152602001838103835286818151815260200191508051906020019060200280838360005b8381101561017f5780820151818401525b602001610166565b50505050905001838103825285818151815260200191508051906020019060200280838360005b838110156101bf5780820151818401525b6020016101a6565b505050509050019550505050505060405180910390f35b34156101e157600080fd5b6100c1600160a060020a036004351663ffffffff6024358116906044358116906064351661046d565b604051901515815260200160405180910390f35b341561022957600080fd5b6102316105c6565b60405163ffffffff909116815260200160405180910390f35b600160a060020a0381166000908152600460205260409020545b919050565b6000610274826105eb565b90505b919050565b6000610289858584610636565b90505b949350505050565b61029c610882565b6102a4610882565b6000806102af610882565b6102b7610882565b60008060008060008060018e101580156102d6575060018d61ffff1610155b15156102e157600080fd5b6103e861ffff8e1611156102f5576103e89c505b600554985061ffff8d168990111561030b57889c505b6000198e0161ffff8e1602955088861061032d5787878a9b509b509b5061045d565b6103388e8e8b610820565b94506000935060009150600090505b8461ffff168161ffff16101561045357600580548790811061036557fe5b906000526020600020900160005b9054600160a060020a036101009290920a90041660008181526004602052604081205495509093508411156104445761ffff821615156103fa578461ffff166040518059106103bf5750595b908082528060200260200182016040525b5097508461ffff166040518059106103e55750595b908082528060200260200182016040525b5096505b82888361ffff168151811061040b57fe5b600160a060020a03909216602092830290910190910152838761ffff84168151811061043357fe5b602090810290910101526001909101905b6001909501945b600101610347565b87878a9b509b509b505b5050505050505050509250925092565b600754600090819033600160a060020a0390811691161461048d57600080fd5b60095463ffffffff90811690851610156104a657600080fd5b60095463ffffffff640100000000909104811690851611156104c757600080fd5b60075463ffffffff7801000000000000000000000000000000000000000000000000909104811690841610156104fc57600080fd5b60085463ffffffff8416111561051157600080fd5b60095461053290680100000000000000009004600160a060020a031661024a565b63ffffffff8416111561054457600080fd5b600160a060020a038616151561055957600080fd5b5060075463ffffffff74010000000000000000000000000000000000000000909104811683028116908516811461058f57600080fd5b6009546105ba90680100000000000000009004600160a060020a031687600063ffffffff871661027c565b91505b50949350505050565b60075474010000000000000000000000000000000000000000900463ffffffff165b90565b6000805433600160a060020a0390811691161461060757600080fd5b50600380548201905560008054600160a060020a0316815260046020526040902080548201905560015b919050565b600080600160a060020a038416151561064e57600080fd5b6000831161065b57600080fd5b600160a060020a03851660009081526004602052604090206001015460ff16151561068557600080fd5b600160a060020a038516600090815260046020526040902054839010156106ab57600080fd5b600160a060020a03841660009081526004602052604090205483810110156106d257600080fd5b50600160a060020a03808416600081815260046020526040808220805494891683529082208054878103909155929091526001015491019060ff16151561078157600160a060020a03841660009081526004602052604090208381556001908101805460ff191682179055600580549091810161074f83826108a6565b916000526020600020900160005b8154600160a060020a038089166101009390930a92830292021916179055506107a0565b600160a060020a03841660009081526004602052604090208054840190555b83600160a060020a031685600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405190815260200160405180910390a3600160a060020a0380851660009081526004602052604080822054928816825290205401811461081357fe5b600191505b509392505050565b60008060008461ffff168481151561083457fe5b06151561084357849250610879565b8461ffff168481151561085257fe5b04600181019250861161086757849250610879565b50600019850161ffff85160283039150815b50509392505050565b60206040519081016040526000815290565b60206040519081016040526000815290565b8154818355818115116108ca576000838152602090206108ca9181019083016108d0565b5b505050565b6105e891905b808211156108ea57600081556001016108d6565b5090565b905600a165627a7a72305820e66ee3c53d27bf73b12591b014cb3d3e1cce51f2133eb3c4b0de46276dcead190029000000000000000000000000ca35b7d915458ef540ade6068dfe2f44e8fa733c00000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000001c
        System.out.println("-------------------部署STO合约-------------------------");
        recieveAddress = invokedContract(nonce, gasPrice, gas, recieveAddress, value, data, db);
        System.out.println("-------------------调用转账方法-------------------------");
        //调用转账方法

        // int rand = new Random().nextInt(900) + 100;
            data = Hex.decode("67b8dc0a" +
                    "000000000000000000000000ca35b7d915458ef540ade6068dfe2f44e8fa733c" +
                    "000000000000000000000000ca35b7d915458ef540ade6068dfe2f44e8fa733a" +
                    "000000000000000000000000ca35b7d915458ef540ade6068dfe2f44e8fa733b" +
                    "0000000000000000000000000000000000000000000000000000000000000001");
            invokedContract(nonce, gasPrice, gas, recieveAddress, value, data, db);

        data = Hex.decode("67b8dc0a" +
                "000000000000000000000000ca35b7d915458ef540ade6068dfe2f44e8fa733c" +
                "000000000000000000000000ca35b7d915458ef540ade6068dfe2f44e8fa733b" +
                "000000000000000000000000ca35b7d915458ef540ade6068dfe2f44e8fa733b" +
                "0000000000000000000000000000000000000000000000000000000000000001");
        invokedContract(nonce, gasPrice, gas, recieveAddress, value, data, db);

        data = Hex.decode("67b8dc0a" +
                "000000000000000000000000ca35b7d915458ef540ade6068dfe2f44e8fa733c" +
                "000000000000000000000000ca35b7d915458ef540ade6068dfe2f44e8fa733e" +
                "000000000000000000000000ca35b7d915458ef540ade6068dfe2f44e8fa733b" +
                "0000000000000000000000000000000000000000000000000000000000000001");
        invokedContract(nonce, gasPrice, gas, recieveAddress, value, data, db);


        System.out.println("-------------------分页查询-------------------------");
        //分页查询
        data = Hex.decode("7adc40dd000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001f4");
        long time = System.currentTimeMillis();
        invokedContract(nonce, gasPrice, gas, recieveAddress, value, data, db);
        List<Abi.Entry.Param> inputs = new ArrayList<>();
        List<Abi.Entry.Param> outputs = new ArrayList<>();
        Abi.Entry.Param p1 = new Abi.Entry.Param();
        p1.type = SolidityType.ArrayType.getType("address[]");

        Abi.Entry.Param p2 = new Abi.Entry.Param();
        p2.type = SolidityType.ArrayType.getType("uint[]");

        Abi.Entry.Param p3 = new Abi.Entry.Param();
        p3.type = new SolidityType.IntType("uint");


        outputs.add(p1);
        outputs.add(p2);
        outputs.add(p3);

        Abi.Function func = new Abi.Function(false, "pagingQuery", inputs, outputs, false);
        List<?> objects = func.decodeResult(resultBytes);
        System.out.println(objects);
//        for (Object add : (Object[]) objects.get(0)) {
//            System.out.println("地址" + Hex.toHexString((byte[]) add));
//        }
//        for (Object add : (Object[]) objects.get(1)) {
//            System.out.println("金额" + ((BigInteger) add).intValue());
//        }
//        System.out.println("总数" + ((BigInteger) objects.get(2)).intValue());
//
//        //System.out.println((SolidityType.AddressType)objects.get(0));
//        System.out.println(System.currentTimeMillis() - time);
    }

    @Test
    public void testFormat() {
//        for (int i = 0; i < 1000; i++) {
//            int rand = new Random().nextInt(900) + 100;
//            System.out.println(String.format("00000000000000000000000014723a09acff6d2a60dcdf7aa4aff308fddc1%s", rand));
//        }
        //byte[] result = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1};
        byte[] result = Hex.decode("00000000000000000000000000000001");
        List<Abi.Entry.Param> inputs = new ArrayList<>();
        List<Abi.Entry.Param> outputs = new ArrayList<>();
        Abi.Entry.Param p1 = new Abi.Entry.Param();
        p1.type = SolidityType.ArrayType.getType("address[]");

        Abi.Entry.Param p2 = new Abi.Entry.Param();
        p2.type = SolidityType.ArrayType.getType("uint[]");

        Abi.Entry.Param p3 = new Abi.Entry.Param();
        p3.type = new SolidityType.IntType("uint");


        outputs.add(p1);
        outputs.add(p2);
        outputs.add(p3);

        Abi.Function func = new Abi.Function(false, "pagingQuery", inputs, outputs, false);
        List<?> objects = func.decodeResult(result);
        System.out.println(objects);

    }

}